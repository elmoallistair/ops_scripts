from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.model_selection import train_test_split

def split_dataframe_stratified(df, feature, target, test_size=0.2, random_state=None):
    """
    Split a DataFrame into training and testing sets with stratification.

    Parameters:
    - df: The input DataFrame.
    - feature: The name of the column(s) to be used as features (X).
    - target: The name of the column to be used as the target (y).
    - test_size: The proportion of the dataset to include in the testing split (default is 0.2).
    - random_state: An optional random seed for reproducibility (default is None).

    Returns:
    - df_train: The training DataFrame.
    - df_test: The testing DataFrame.
    """

    X_train, X_test, *_ = train_test_split(df[feature], df[target], test_size=test_size, 
                                                        stratify=df[target], random_state=random_state)

    df_train = df.loc[X_train.index]
    df_test = df.loc[X_test.index]

    return df_train, df_test

def vectorize_dataset(df, feature):
    """
    Train a TF-IDF vectorizer on a DataFrame and apply it to the same DataFrame.

    Parameters:
    - df: The input DataFrame containing both training and testing data.
    - feature: The name of the column containing text data (X).

    Returns:
    - df_tfidf: TF-IDF vectors for the text data in the input DataFrame.
    """

    tfidf_vectorizer = TfidfVectorizer()
    df_tfidf = tfidf_vectorizer.fit_transform(df[feature])

    return df_tfidf

def train_model(X_train_tfidf, y_train, model):
    """
    Train a classification model on TF-IDF vectors.

    Parameters:
    - X_train_tfidf: TF-IDF vectors for the training text data.
    - y_train: The target variable for the training data.
    - model: The classification model to be trained.

    Returns:
    - trained_model: The trained classification model.
    """

    trained_model = model.fit(X_train_tfidf, y_train)

    return trained_model
